// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: igo/v1/igo.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Delivery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request      string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	DeliveryDate int64  `protobuf:"varint,2,opt,name=deliveryDate,proto3" json:"deliveryDate,omitempty"` // unix time in milliseconds
}

func (x *Delivery) Reset() {
	*x = Delivery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delivery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delivery) ProtoMessage() {}

func (x *Delivery) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delivery.ProtoReflect.Descriptor instead.
func (*Delivery) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{0}
}

func (x *Delivery) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *Delivery) GetDeliveryDate() int64 {
	if x != nil {
		return x.DeliveryDate
	}
	return 0
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BicAnalysis        bool               `protobuf:"varint,1,opt,name=bicAnalysis,proto3" json:"bicAnalysis,omitempty"`
	DataAccessEmails   string             `protobuf:"bytes,2,opt,name=dataAccessEmails,proto3" json:"dataAccessEmails,omitempty"`
	DataAnalystEmail   string             `protobuf:"bytes,3,opt,name=dataAnalystEmail,proto3" json:"dataAnalystEmail,omitempty"`
	DataAnalystName    string             `protobuf:"bytes,4,opt,name=dataAnalystName,proto3" json:"dataAnalystName,omitempty"`
	DeliveryDate       int64              `protobuf:"varint,5,opt,name=deliveryDate,proto3" json:"deliveryDate,omitempty"`
	InvestigatorEmail  string             `protobuf:"bytes,6,opt,name=investigatorEmail,proto3" json:"investigatorEmail,omitempty"`
	InvestigatorName   string             `protobuf:"bytes,7,opt,name=investigatorName,proto3" json:"investigatorName,omitempty"`
	IsCmoRequest       bool               `protobuf:"varint,8,opt,name=isCmoRequest,proto3" json:"isCmoRequest,omitempty"`
	LabHeadEmail       string             `protobuf:"bytes,9,opt,name=labHeadEmail,proto3" json:"labHeadEmail,omitempty"`
	LabHeadName        string             `protobuf:"bytes,10,opt,name=labHeadName,proto3" json:"labHeadName,omitempty"`
	LibraryType        string             `protobuf:"bytes,11,opt,name=libraryType,proto3" json:"libraryType,omitempty"`
	OtherContactEmails string             `protobuf:"bytes,12,opt,name=otherContactEmails,proto3" json:"otherContactEmails,omitempty"`
	PiEmail            string             `protobuf:"bytes,13,opt,name=piEmail,proto3" json:"piEmail,omitempty"`
	PooledNormals      []string           `protobuf:"bytes,14,rep,name=pooledNormals,proto3" json:"pooledNormals,omitempty"`
	ProjectManagerName string             `protobuf:"bytes,15,opt,name=projectManagerName,proto3" json:"projectManagerName,omitempty"`
	QcAccessEmails     string             `protobuf:"bytes,16,opt,name=qcAccessEmails,proto3" json:"qcAccessEmails,omitempty"`
	Recipe             string             `protobuf:"bytes,17,opt,name=recipe,proto3" json:"recipe,omitempty"`
	RequestId          string             `protobuf:"bytes,18,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Samples            []*Request_Samples `protobuf:"bytes,19,rep,name=samples,proto3" json:"samples,omitempty"`
	Strand             string             `protobuf:"bytes,20,opt,name=strand,proto3" json:"strand,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetBicAnalysis() bool {
	if x != nil {
		return x.BicAnalysis
	}
	return false
}

func (x *Request) GetDataAccessEmails() string {
	if x != nil {
		return x.DataAccessEmails
	}
	return ""
}

func (x *Request) GetDataAnalystEmail() string {
	if x != nil {
		return x.DataAnalystEmail
	}
	return ""
}

func (x *Request) GetDataAnalystName() string {
	if x != nil {
		return x.DataAnalystName
	}
	return ""
}

func (x *Request) GetDeliveryDate() int64 {
	if x != nil {
		return x.DeliveryDate
	}
	return 0
}

func (x *Request) GetInvestigatorEmail() string {
	if x != nil {
		return x.InvestigatorEmail
	}
	return ""
}

func (x *Request) GetInvestigatorName() string {
	if x != nil {
		return x.InvestigatorName
	}
	return ""
}

func (x *Request) GetIsCmoRequest() bool {
	if x != nil {
		return x.IsCmoRequest
	}
	return false
}

func (x *Request) GetLabHeadEmail() string {
	if x != nil {
		return x.LabHeadEmail
	}
	return ""
}

func (x *Request) GetLabHeadName() string {
	if x != nil {
		return x.LabHeadName
	}
	return ""
}

func (x *Request) GetLibraryType() string {
	if x != nil {
		return x.LibraryType
	}
	return ""
}

func (x *Request) GetOtherContactEmails() string {
	if x != nil {
		return x.OtherContactEmails
	}
	return ""
}

func (x *Request) GetPiEmail() string {
	if x != nil {
		return x.PiEmail
	}
	return ""
}

func (x *Request) GetPooledNormals() []string {
	if x != nil {
		return x.PooledNormals
	}
	return nil
}

func (x *Request) GetProjectManagerName() string {
	if x != nil {
		return x.ProjectManagerName
	}
	return ""
}

func (x *Request) GetQcAccessEmails() string {
	if x != nil {
		return x.QcAccessEmails
	}
	return ""
}

func (x *Request) GetRecipe() string {
	if x != nil {
		return x.Recipe
	}
	return ""
}

func (x *Request) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *Request) GetSamples() []*Request_Samples {
	if x != nil {
		return x.Samples
	}
	return nil
}

func (x *Request) GetStrand() string {
	if x != nil {
		return x.Strand
	}
	return ""
}

type SampleManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaitSet              string                            `protobuf:"bytes,1,opt,name=baitSet,proto3" json:"baitSet,omitempty"`
	CfDNA2DBarcode       string                            `protobuf:"bytes,2,opt,name=cfDNA2dBarcode,proto3" json:"cfDNA2dBarcode,omitempty"`
	CmoInfoIgoId         string                            `protobuf:"bytes,3,opt,name=cmoInfoIgoId,proto3" json:"cmoInfoIgoId,omitempty"`
	CmoPatientId         string                            `protobuf:"bytes,4,opt,name=cmoPatientId,proto3" json:"cmoPatientId,omitempty"`
	CmoSampleClass       string                            `protobuf:"bytes,5,opt,name=cmoSampleClass,proto3" json:"cmoSampleClass,omitempty"`
	CmoSampleIdFields    *SampleManifest_Cmosampleidfields `protobuf:"bytes,6,opt,name=cmoSampleIdFields,proto3" json:"cmoSampleIdFields,omitempty"`
	CmoSampleName        string                            `protobuf:"bytes,7,opt,name=cmoSampleName,proto3" json:"cmoSampleName,omitempty"`
	CollectionYear       string                            `protobuf:"bytes,8,opt,name=collectionYear,proto3" json:"collectionYear,omitempty"`
	IgoId                string                            `protobuf:"bytes,9,opt,name=igoId,proto3" json:"igoId,omitempty"`
	InvestigatorSampleId string                            `protobuf:"bytes,10,opt,name=investigatorSampleId,proto3" json:"investigatorSampleId,omitempty"`
	Libraries            []*SampleManifest_Libraries       `protobuf:"bytes,11,rep,name=libraries,proto3" json:"libraries,omitempty"`
	OncoTreeCode         string                            `protobuf:"bytes,12,opt,name=oncoTreeCode,proto3" json:"oncoTreeCode,omitempty"`
	Preservation         string                            `protobuf:"bytes,13,opt,name=preservation,proto3" json:"preservation,omitempty"`
	QcReports            []*SampleManifest_Qcreports       `protobuf:"bytes,14,rep,name=qcReports,proto3" json:"qcReports,omitempty"`
	SampleName           string                            `protobuf:"bytes,15,opt,name=sampleName,proto3" json:"sampleName,omitempty"`
	SampleOrigin         string                            `protobuf:"bytes,16,opt,name=sampleOrigin,proto3" json:"sampleOrigin,omitempty"`
	Sex                  string                            `protobuf:"bytes,17,opt,name=sex,proto3" json:"sex,omitempty"`
	Species              string                            `protobuf:"bytes,18,opt,name=species,proto3" json:"species,omitempty"`
	SpecimenType         string                            `protobuf:"bytes,19,opt,name=specimenType,proto3" json:"specimenType,omitempty"`
	TissueLocation       string                            `protobuf:"bytes,20,opt,name=tissueLocation,proto3" json:"tissueLocation,omitempty"`
	TubeId               string                            `protobuf:"bytes,21,opt,name=tubeId,proto3" json:"tubeId,omitempty"`
	TumorOrNormal        string                            `protobuf:"bytes,22,opt,name=tumorOrNormal,proto3" json:"tumorOrNormal,omitempty"`
	IgoComplete          *bool                             `protobuf:"varint,23,opt,name=igoComplete,proto3,oneof" json:"igoComplete,omitempty"`
}

func (x *SampleManifest) Reset() {
	*x = SampleManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleManifest) ProtoMessage() {}

func (x *SampleManifest) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleManifest.ProtoReflect.Descriptor instead.
func (*SampleManifest) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{2}
}

func (x *SampleManifest) GetBaitSet() string {
	if x != nil {
		return x.BaitSet
	}
	return ""
}

func (x *SampleManifest) GetCfDNA2DBarcode() string {
	if x != nil {
		return x.CfDNA2DBarcode
	}
	return ""
}

func (x *SampleManifest) GetCmoInfoIgoId() string {
	if x != nil {
		return x.CmoInfoIgoId
	}
	return ""
}

func (x *SampleManifest) GetCmoPatientId() string {
	if x != nil {
		return x.CmoPatientId
	}
	return ""
}

func (x *SampleManifest) GetCmoSampleClass() string {
	if x != nil {
		return x.CmoSampleClass
	}
	return ""
}

func (x *SampleManifest) GetCmoSampleIdFields() *SampleManifest_Cmosampleidfields {
	if x != nil {
		return x.CmoSampleIdFields
	}
	return nil
}

func (x *SampleManifest) GetCmoSampleName() string {
	if x != nil {
		return x.CmoSampleName
	}
	return ""
}

func (x *SampleManifest) GetCollectionYear() string {
	if x != nil {
		return x.CollectionYear
	}
	return ""
}

func (x *SampleManifest) GetIgoId() string {
	if x != nil {
		return x.IgoId
	}
	return ""
}

func (x *SampleManifest) GetInvestigatorSampleId() string {
	if x != nil {
		return x.InvestigatorSampleId
	}
	return ""
}

func (x *SampleManifest) GetLibraries() []*SampleManifest_Libraries {
	if x != nil {
		return x.Libraries
	}
	return nil
}

func (x *SampleManifest) GetOncoTreeCode() string {
	if x != nil {
		return x.OncoTreeCode
	}
	return ""
}

func (x *SampleManifest) GetPreservation() string {
	if x != nil {
		return x.Preservation
	}
	return ""
}

func (x *SampleManifest) GetQcReports() []*SampleManifest_Qcreports {
	if x != nil {
		return x.QcReports
	}
	return nil
}

func (x *SampleManifest) GetSampleName() string {
	if x != nil {
		return x.SampleName
	}
	return ""
}

func (x *SampleManifest) GetSampleOrigin() string {
	if x != nil {
		return x.SampleOrigin
	}
	return ""
}

func (x *SampleManifest) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *SampleManifest) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *SampleManifest) GetSpecimenType() string {
	if x != nil {
		return x.SpecimenType
	}
	return ""
}

func (x *SampleManifest) GetTissueLocation() string {
	if x != nil {
		return x.TissueLocation
	}
	return ""
}

func (x *SampleManifest) GetTubeId() string {
	if x != nil {
		return x.TubeId
	}
	return ""
}

func (x *SampleManifest) GetTumorOrNormal() string {
	if x != nil {
		return x.TumorOrNormal
	}
	return ""
}

func (x *SampleManifest) GetIgoComplete() bool {
	if x != nil && x.IgoComplete != nil {
		return *x.IgoComplete
	}
	return false
}

type Request_Samples struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IgoComplete          bool   `protobuf:"varint,1,opt,name=igoComplete,proto3" json:"igoComplete,omitempty"`
	IgoSampleId          string `protobuf:"bytes,2,opt,name=igoSampleId,proto3" json:"igoSampleId,omitempty"`
	InvestigatorSampleId string `protobuf:"bytes,3,opt,name=investigatorSampleId,proto3" json:"investigatorSampleId,omitempty"`
}

func (x *Request_Samples) Reset() {
	*x = Request_Samples{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request_Samples) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request_Samples) ProtoMessage() {}

func (x *Request_Samples) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request_Samples.ProtoReflect.Descriptor instead.
func (*Request_Samples) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{1, 0}
}

func (x *Request_Samples) GetIgoComplete() bool {
	if x != nil {
		return x.IgoComplete
	}
	return false
}

func (x *Request_Samples) GetIgoSampleId() string {
	if x != nil {
		return x.IgoSampleId
	}
	return ""
}

func (x *Request_Samples) GetInvestigatorSampleId() string {
	if x != nil {
		return x.InvestigatorSampleId
	}
	return ""
}

type SampleManifest_Cmosampleidfields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NaToExtract         string `protobuf:"bytes,1,opt,name=naToExtract,proto3" json:"naToExtract,omitempty"`
	NormalizedPatientId string `protobuf:"bytes,2,opt,name=normalizedPatientId,proto3" json:"normalizedPatientId,omitempty"`
	Recipe              string `protobuf:"bytes,3,opt,name=recipe,proto3" json:"recipe,omitempty"`
	SampleType          string `protobuf:"bytes,4,opt,name=sampleType,proto3" json:"sampleType,omitempty"`
}

func (x *SampleManifest_Cmosampleidfields) Reset() {
	*x = SampleManifest_Cmosampleidfields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleManifest_Cmosampleidfields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleManifest_Cmosampleidfields) ProtoMessage() {}

func (x *SampleManifest_Cmosampleidfields) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleManifest_Cmosampleidfields.ProtoReflect.Descriptor instead.
func (*SampleManifest_Cmosampleidfields) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{2, 0}
}

func (x *SampleManifest_Cmosampleidfields) GetNaToExtract() string {
	if x != nil {
		return x.NaToExtract
	}
	return ""
}

func (x *SampleManifest_Cmosampleidfields) GetNormalizedPatientId() string {
	if x != nil {
		return x.NormalizedPatientId
	}
	return ""
}

func (x *SampleManifest_Cmosampleidfields) GetRecipe() string {
	if x != nil {
		return x.Recipe
	}
	return ""
}

func (x *SampleManifest_Cmosampleidfields) GetSampleType() string {
	if x != nil {
		return x.SampleType
	}
	return ""
}

type SampleManifest_Runs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fastqs        []string `protobuf:"bytes,1,rep,name=fastqs,proto3" json:"fastqs,omitempty"`
	FlowCellId    string   `protobuf:"bytes,2,opt,name=flowCellId,proto3" json:"flowCellId,omitempty"`
	FlowCellLanes []uint32 `protobuf:"varint,3,rep,packed,name=flowCellLanes,proto3" json:"flowCellLanes,omitempty"`
	ReadLength    string   `protobuf:"bytes,4,opt,name=readLength,proto3" json:"readLength,omitempty"`
	RunDate       string   `protobuf:"bytes,5,opt,name=runDate,proto3" json:"runDate,omitempty"`
	RunId         string   `protobuf:"bytes,6,opt,name=runId,proto3" json:"runId,omitempty"`
	RunMode       string   `protobuf:"bytes,7,opt,name=runMode,proto3" json:"runMode,omitempty"`
}

func (x *SampleManifest_Runs) Reset() {
	*x = SampleManifest_Runs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleManifest_Runs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleManifest_Runs) ProtoMessage() {}

func (x *SampleManifest_Runs) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleManifest_Runs.ProtoReflect.Descriptor instead.
func (*SampleManifest_Runs) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{2, 1}
}

func (x *SampleManifest_Runs) GetFastqs() []string {
	if x != nil {
		return x.Fastqs
	}
	return nil
}

func (x *SampleManifest_Runs) GetFlowCellId() string {
	if x != nil {
		return x.FlowCellId
	}
	return ""
}

func (x *SampleManifest_Runs) GetFlowCellLanes() []uint32 {
	if x != nil {
		return x.FlowCellLanes
	}
	return nil
}

func (x *SampleManifest_Runs) GetReadLength() string {
	if x != nil {
		return x.ReadLength
	}
	return ""
}

func (x *SampleManifest_Runs) GetRunDate() string {
	if x != nil {
		return x.RunDate
	}
	return ""
}

func (x *SampleManifest_Runs) GetRunId() string {
	if x != nil {
		return x.RunId
	}
	return ""
}

func (x *SampleManifest_Runs) GetRunMode() string {
	if x != nil {
		return x.RunMode
	}
	return ""
}

type SampleManifest_Libraries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BarcodeId                string                 `protobuf:"bytes,1,opt,name=barcodeId,proto3" json:"barcodeId,omitempty"`
	BarcodeIndex             string                 `protobuf:"bytes,2,opt,name=barcodeIndex,proto3" json:"barcodeIndex,omitempty"`
	CaptureConcentrationNm   string                 `protobuf:"bytes,3,opt,name=captureConcentrationNm,proto3" json:"captureConcentrationNm,omitempty"`
	CaptureInputNg           string                 `protobuf:"bytes,4,opt,name=captureInputNg,proto3" json:"captureInputNg,omitempty"`
	CaptureName              string                 `protobuf:"bytes,5,opt,name=captureName,proto3" json:"captureName,omitempty"`
	DnaInputNg               uint32                 `protobuf:"varint,6,opt,name=dnaInputNg,proto3" json:"dnaInputNg,omitempty"`
	LibraryConcentrationNgul uint32                 `protobuf:"varint,7,opt,name=libraryConcentrationNgul,proto3" json:"libraryConcentrationNgul,omitempty"`
	LibraryIgoId             string                 `protobuf:"bytes,8,opt,name=libraryIgoId,proto3" json:"libraryIgoId,omitempty"`
	LibraryVolume            uint32                 `protobuf:"varint,9,opt,name=libraryVolume,proto3" json:"libraryVolume,omitempty"`
	Runs                     []*SampleManifest_Runs `protobuf:"bytes,10,rep,name=runs,proto3" json:"runs,omitempty"`
}

func (x *SampleManifest_Libraries) Reset() {
	*x = SampleManifest_Libraries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleManifest_Libraries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleManifest_Libraries) ProtoMessage() {}

func (x *SampleManifest_Libraries) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleManifest_Libraries.ProtoReflect.Descriptor instead.
func (*SampleManifest_Libraries) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{2, 2}
}

func (x *SampleManifest_Libraries) GetBarcodeId() string {
	if x != nil {
		return x.BarcodeId
	}
	return ""
}

func (x *SampleManifest_Libraries) GetBarcodeIndex() string {
	if x != nil {
		return x.BarcodeIndex
	}
	return ""
}

func (x *SampleManifest_Libraries) GetCaptureConcentrationNm() string {
	if x != nil {
		return x.CaptureConcentrationNm
	}
	return ""
}

func (x *SampleManifest_Libraries) GetCaptureInputNg() string {
	if x != nil {
		return x.CaptureInputNg
	}
	return ""
}

func (x *SampleManifest_Libraries) GetCaptureName() string {
	if x != nil {
		return x.CaptureName
	}
	return ""
}

func (x *SampleManifest_Libraries) GetDnaInputNg() uint32 {
	if x != nil {
		return x.DnaInputNg
	}
	return 0
}

func (x *SampleManifest_Libraries) GetLibraryConcentrationNgul() uint32 {
	if x != nil {
		return x.LibraryConcentrationNgul
	}
	return 0
}

func (x *SampleManifest_Libraries) GetLibraryIgoId() string {
	if x != nil {
		return x.LibraryIgoId
	}
	return ""
}

func (x *SampleManifest_Libraries) GetLibraryVolume() uint32 {
	if x != nil {
		return x.LibraryVolume
	}
	return 0
}

func (x *SampleManifest_Libraries) GetRuns() []*SampleManifest_Runs {
	if x != nil {
		return x.Runs
	}
	return nil
}

type SampleManifest_Qcreports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IGORecommendation    string `protobuf:"bytes,1,opt,name=IGORecommendation,proto3" json:"IGORecommendation,omitempty"`
	Comments             string `protobuf:"bytes,2,opt,name=comments,proto3" json:"comments,omitempty"`
	InvestigatorDecision string `protobuf:"bytes,3,opt,name=investigatorDecision,proto3" json:"investigatorDecision,omitempty"`
	QcReportType         string `protobuf:"bytes,4,opt,name=qcReportType,proto3" json:"qcReportType,omitempty"`
}

func (x *SampleManifest_Qcreports) Reset() {
	*x = SampleManifest_Qcreports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_igo_v1_igo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SampleManifest_Qcreports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SampleManifest_Qcreports) ProtoMessage() {}

func (x *SampleManifest_Qcreports) ProtoReflect() protoreflect.Message {
	mi := &file_igo_v1_igo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SampleManifest_Qcreports.ProtoReflect.Descriptor instead.
func (*SampleManifest_Qcreports) Descriptor() ([]byte, []int) {
	return file_igo_v1_igo_proto_rawDescGZIP(), []int{2, 3}
}

func (x *SampleManifest_Qcreports) GetIGORecommendation() string {
	if x != nil {
		return x.IGORecommendation
	}
	return ""
}

func (x *SampleManifest_Qcreports) GetComments() string {
	if x != nil {
		return x.Comments
	}
	return ""
}

func (x *SampleManifest_Qcreports) GetInvestigatorDecision() string {
	if x != nil {
		return x.InvestigatorDecision
	}
	return ""
}

func (x *SampleManifest_Qcreports) GetQcReportType() string {
	if x != nil {
		return x.QcReportType
	}
	return ""
}

var File_igo_v1_igo_proto protoreflect.FileDescriptor

var file_igo_v1_igo_proto_rawDesc = []byte{
	0x0a, 0x10, 0x69, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x48, 0x0a, 0x08, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x22, 0xfd, 0x06, 0x0a,
	0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x69, 0x63, 0x41,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62,
	0x69, 0x63, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61,
	0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x61, 0x74,
	0x61, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2a,
	0x0a, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73,
	0x43, 0x6d, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x69, 0x73, 0x43, 0x6d, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x0c, 0x6c, 0x61, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x48, 0x65, 0x61, 0x64, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x62, 0x48, 0x65, 0x61, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x61, 0x62, 0x48, 0x65, 0x61, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x62, 0x72, 0x61,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x69, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x69, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x6f, 0x6f, 0x6c, 0x65, 0x64, 0x4e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x71, 0x63, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x71, 0x63, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18,
	0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x74, 0x72, 0x61, 0x6e, 0x64, 0x1a, 0x81, 0x01, 0x0a, 0x07, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x67, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x67, 0x6f, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x67, 0x6f, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x67, 0x6f,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x65,
	0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x22, 0xdb, 0x0e, 0x0a,
	0x0e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x62, 0x61, 0x69, 0x74, 0x53, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x62, 0x61, 0x69, 0x74, 0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x66, 0x44,
	0x4e, 0x41, 0x32, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x66, 0x44, 0x4e, 0x41, 0x32, 0x64, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6d, 0x6f, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x67, 0x6f, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6d, 0x6f, 0x49, 0x6e, 0x66, 0x6f,
	0x49, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6d, 0x6f, 0x50, 0x61, 0x74, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6d, 0x6f,
	0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6d, 0x6f,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x63, 0x6d, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x4f, 0x0a, 0x11, 0x63, 0x6d, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6d,
	0x6f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x69, 0x64, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52,
	0x11, 0x63, 0x6d, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6d, 0x6f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6d, 0x6f, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x67, 0x6f, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74,
	0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x69, 0x62, 0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x09, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x6e, 0x63, 0x6f, 0x54, 0x72, 0x65, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x6e, 0x63, 0x6f, 0x54,
	0x72, 0x65, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x71,
	0x63, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e,
	0x51, 0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x09, 0x71, 0x63, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x69, 0x6d, 0x65, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x6d, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x73, 0x73,
	0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x74, 0x75, 0x62, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x75, 0x6d, 0x6f,
	0x72, 0x4f, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x74, 0x75, 0x6d, 0x6f, 0x72, 0x4f, 0x72, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x25,
	0x0a, 0x0b, 0x69, 0x67, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x67, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x1a, 0x9f, 0x01, 0x0a, 0x11, 0x43, 0x6d, 0x6f, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x69, 0x64, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6e,
	0x61, 0x54, 0x6f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6e, 0x61, 0x54, 0x6f, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x30, 0x0a,
	0x13, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x1a, 0xce, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6e, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x61, 0x73, 0x74, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x61, 0x73, 0x74, 0x71, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77,
	0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x6c,
	0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x77,
	0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x0d, 0x66, 0x6c, 0x6f, 0x77, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x61, 0x6e, 0x65, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x75, 0x6e, 0x49,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x75, 0x6e, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x72, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x1a, 0x9f, 0x03, 0x0a, 0x09, 0x4c, 0x69, 0x62,
	0x72, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x72, 0x63, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x36, 0x0a, 0x16, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6d,
	0x12, 0x26, 0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6e,
	0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x64, 0x6e, 0x61, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4e, 0x67, 0x12, 0x3a, 0x0a, 0x18, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x67, 0x75, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x67, 0x75, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72,
	0x79, 0x49, 0x67, 0x6f, 0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x49, 0x67, 0x6f, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65,
	0x12, 0x28, 0x0a, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x2e,
	0x52, 0x75, 0x6e, 0x73, 0x52, 0x04, 0x72, 0x75, 0x6e, 0x73, 0x1a, 0xad, 0x01, 0x0a, 0x09, 0x51,
	0x63, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x49, 0x47, 0x4f, 0x52,
	0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x47, 0x4f, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x69, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x71, 0x63, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x71, 0x63,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x69,
	0x67, 0x6f, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x73, 0x6b, 0x63, 0x63, 0x2f, 0x73,
	0x6d, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x69, 0x67, 0x6f, 0x2f, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_igo_v1_igo_proto_rawDescOnce sync.Once
	file_igo_v1_igo_proto_rawDescData = file_igo_v1_igo_proto_rawDesc
)

func file_igo_v1_igo_proto_rawDescGZIP() []byte {
	file_igo_v1_igo_proto_rawDescOnce.Do(func() {
		file_igo_v1_igo_proto_rawDescData = protoimpl.X.CompressGZIP(file_igo_v1_igo_proto_rawDescData)
	})
	return file_igo_v1_igo_proto_rawDescData
}

var file_igo_v1_igo_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_igo_v1_igo_proto_goTypes = []interface{}{
	(*Delivery)(nil),                         // 0: Delivery
	(*Request)(nil),                          // 1: Request
	(*SampleManifest)(nil),                   // 2: SampleManifest
	(*Request_Samples)(nil),                  // 3: Request.Samples
	(*SampleManifest_Cmosampleidfields)(nil), // 4: SampleManifest.Cmosampleidfields
	(*SampleManifest_Runs)(nil),              // 5: SampleManifest.Runs
	(*SampleManifest_Libraries)(nil),         // 6: SampleManifest.Libraries
	(*SampleManifest_Qcreports)(nil),         // 7: SampleManifest.Qcreports
}
var file_igo_v1_igo_proto_depIdxs = []int32{
	3, // 0: Request.samples:type_name -> Request.Samples
	4, // 1: SampleManifest.cmoSampleIdFields:type_name -> SampleManifest.Cmosampleidfields
	6, // 2: SampleManifest.libraries:type_name -> SampleManifest.Libraries
	7, // 3: SampleManifest.qcReports:type_name -> SampleManifest.Qcreports
	5, // 4: SampleManifest.Libraries.runs:type_name -> SampleManifest.Runs
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_igo_v1_igo_proto_init() }
func file_igo_v1_igo_proto_init() {
	if File_igo_v1_igo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_igo_v1_igo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delivery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_igo_v1_igo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_igo_v1_igo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_igo_v1_igo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request_Samples); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_igo_v1_igo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleManifest_Cmosampleidfields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_igo_v1_igo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleManifest_Runs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_igo_v1_igo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleManifest_Libraries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_igo_v1_igo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SampleManifest_Qcreports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_igo_v1_igo_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_igo_v1_igo_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_igo_v1_igo_proto_goTypes,
		DependencyIndexes: file_igo_v1_igo_proto_depIdxs,
		MessageInfos:      file_igo_v1_igo_proto_msgTypes,
	}.Build()
	File_igo_v1_igo_proto = out.File
	file_igo_v1_igo_proto_rawDesc = nil
	file_igo_v1_igo_proto_goTypes = nil
	file_igo_v1_igo_proto_depIdxs = nil
}
